!function(){"use strict";class e{constructor(e,t,r,o,s){this._cardTitle=e.name,this._cardLink=e.link,this._cardSelector=t,this._handleImageClick=r,this._id=e._id,this._handleCardDelete=o,this._handleCardLike=s,this._likeStatus=e.isLiked}_setEventListeners(){this._deleteButton=this._element.querySelector(".locations__card-delete"),this._deleteButton.addEventListener("click",this.handleDeleteClick),this._likeButton=this._element.querySelector(".locations__card-like"),this._likeButton.addEventListener("click",this._likeCard),this._cardImage=this._element.querySelector(".locations__card-image"),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({title:this._cardTitle,image:this._cardLink})}))}getId(){return this._id}handleDeleteClick=()=>{this._handleCardDelete(this)};deleteCard=()=>{this._element.remove(),this._element=null};_likeCard=e=>{this._likeButton.classList.toggle("locations__card-like_active"),this._handleCardLike(this._id,e)};_setLike(){!0===this._likeStatus?this._likeButton.classList.add("locations__card-like_active"):this._likeButton.classList.remove("locations__card-like_active")}_getCardData(){return document.querySelector(this._cardSelector).content.cloneNode(!0).querySelector(".locations__card-wrapper")}generateCard(){return this._element=this._getCardData(),this._setEventListeners(),this._cardText=this._element.querySelector(".locations__card-text"),this._cardText.textContent=this._cardTitle,this._cardImage.src=this._cardLink,this._cardImage.alt=`Photo of ${this._cardTitle}`,this._setLike(),this._element}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const r={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_visible"};class o{constructor(e){this._popupSelector=document.querySelector(e)}open(){this._popupSelector.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupSelector.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupSelector.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class s extends o{constructor(e,t){super(e),this._handleFormSubmit=t,this._formSelector=this._popupSelector.querySelector(".modal__container"),this._inputList=this._formSelector.querySelectorAll(".modal__input"),this._button=this._formSelector.querySelector(".modal__save"),this._originalButtonText=this._button.textContent}_getInputValues(){return this.inputValues={},this._inputList.forEach((e=>{this.inputValues[e.name]=e.value})),this.inputValues}setEventListeners(){this._formSelector.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._formSelector.reset()})),super.setEventListeners()}resetButtonText(){this._button.textContent=this._originalButtonText}changeButtonText(){this._button.textContent="Saving"}}class a extends o{constructor(e,t){super(e),this._handleFormSubmit=t,this._formSelector=this._popupSelector.querySelector(".modal__container"),this._button=this._formSelector.querySelector(".modal__save"),this._originalButtonText=this._button.textContent}setEventListeners(){this._formSelector.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}setHandleFormSubmit(e){this._handleFormSubmit=e}}const i=document.querySelector("#edit-modal"),n=document.querySelector("#avatar-modal"),l=document.forms["profile-form"],c=document.querySelector(".profile__edit-button"),d=(i.querySelector(".modal__close"),document.querySelector(".profile__image")),u=document.querySelector(".profile__avatar-button"),h=(document.querySelector(".profile__name"),document.querySelector(".profile__description"),document.querySelector(".modal__input-name")),_=document.querySelector(".modal__input-description"),m=(l.querySelector(".modal__save"),document.querySelector(".profile__add-button")),p=document.querySelector("#add-card-modal"),f=document.querySelector("#delete-card-modal"),v=document.forms["card-form"],S=(p.querySelector(".modal__close"),p.querySelector(".modal__input-title"),p.querySelector(".modal__input-link"),v.querySelector(".modal__save"),document.querySelector("#locations-card"),document.querySelector(".locations__cards"),document.querySelector("#preview-image-modal")),E=(document.querySelector(".modal__image"),S.querySelector(".modal__close"),S.querySelector(".modal__image-text"),Array.from(document.querySelectorAll(".modal")),[p,i,n]),b=[f],y=Array.from(document.querySelectorAll(".modal__container")),g={},C={},k={};let L={};const q=new class{constructor(e){this._baseURL=e.baseUrl,this._headers=e.headers}getInitialCards(){return fetch("https://around-api.en.tripleten-services.com/v1/cards",{headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>e))}addCard(e,t){return fetch("https://around-api.en.tripleten-services.com/v1/cards",{method:"POST",headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d","Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>e))}deleteCard(e){return fetch(`https://around-api.en.tripleten-services.com/v1/cards/${e}`,{method:"DELETE",headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>e))}loadUserInfo(){return fetch("https://around-api.en.tripleten-services.com/v1/users/me",{headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d"}}).then((e=>e.ok?e.json():Promise.reject(`Error ${e.status}`))).then((e=>e))}editUserInfo(e,t){return fetch("https://around-api.en.tripleten-services.com/v1/users/me",{method:"PATCH",headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d","Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>e))}updateProfilePicture(e){return fetch("https://around-api.en.tripleten-services.com/v1/users/me/avatar",{method:"PATCH",headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d","Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>e))}likeCard(e){return fetch(`https://around-api.en.tripleten-services.com/v1/cards/${e}/likes`,{method:"PUT",headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>e))}unlikeCard(e){return fetch(`https://around-api.en.tripleten-services.com/v1/cards/${e}/likes`,{method:"DELETE",headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>e))}checkStatus(e,t){return Promise.all([e,t])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d4cadbf6-4b07-471d-8c88-393f36774c1d","Content-Type":"application/json"}}),I=new class extends o{constructor(e){super(e),this._popupImage=this._popupSelector.querySelector(".modal__image"),this._popupTitle=this._popupSelector.querySelector(".modal__image-text")}open(e){let{title:t,image:r}=e;this._popupImage.src=r,this._popupImage.alt=t,this._popupTitle.textContent=t,super.open()}}("#preview-image-modal");I.setEventListeners();const x=e=>{let{title:t,image:r}=e;I.open({title:t,image:r})},B=(e,t)=>t.target.classList.contains("locations__card-like_active")?q.likeCard(e).catch((e=>{console.error(e)})):q.unlikeCard(e).catch((e=>{console.error(e)}));q.loadUserInfo().then((e=>{A.setUserInfo(e.name,e.about),A.updateUserAvatar(e.avatar)})).catch((e=>{console.error(e)})),c.addEventListener("click",(()=>{g["profile-form"].resetValidation(),C["edit-modal"].resetButtonText(),C["edit-modal"].open(),function(){const e=A.getUserInfo();h.value=e.name,_.value=e.job}()})),d.addEventListener("mouseover",(()=>{u.classList.add("profile__avatar-button_visible")})),u.addEventListener("click",(()=>{g["avatar-form"].resetValidation(),C["avatar-modal"].resetButtonText(),C["avatar-modal"].open()}));const T=t=>{const r=new e(t,"#locations-card",x,(e=>{k["delete-card-modal"].open(),k["delete-card-modal"].setHandleFormSubmit((()=>{q.deleteCard(e.getId()).then((()=>{e.deleteCard(),k["delete-card-modal"].close()})).catch((e=>{console.error(e)}))}))}),B);return L[t.name]=r,r.generateCard()},j=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._containerSelector=t,this._container=document.querySelector(this._containerSelector)}renderItems(){this._renderer()}addItem(e){this._container.prepend(e)}}({renderer:()=>{q.checkStatus(q.loadUserInfo(),q.getInitialCards()).then((e=>{e[1].forEach((e=>{const t=T(e);return j.addItem(t)}))})).catch((e=>{console.error(e)}))}},".locations__cards");j.renderItems(),m.addEventListener("click",(()=>{g["card-form"].resetValidation(),C["add-card-modal"].resetButtonText(),C["add-card-modal"].open()})),y.forEach((e=>{const o=new t(r,e);o.enableValidation(),g[e.name]=o})),E.forEach((e=>{const t=new s(`#${e.id}`,(t=>"add-card-modal"===e.id?function(e){const t=e["image-title"],r=e["image-link"];j.addItem(T({name:t,link:r})),q.addCard(e["image-title"],e["image-link"]).then((e=>{C["add-card-modal"].changeButtonText()})).catch((e=>{console.error(e)})),C["add-card-modal"].close()}(t):"edit-modal"===e.id?function(e){A.setUserInfo(e.Name,e["About me"]),q.editUserInfo(e.Name,e["About me"]).then((e=>{C["edit-modal"].changeButtonText()})).catch((e=>{console.error(e)})),C["edit-modal"].close()}(t):void("avatar-modal"===e.id&&(console.log(t["avatar-link"]),(e=>{q.updateProfilePicture(e["avatar-link"]).catch((e=>{console.error(e)})),q.loadUserInfo().then((e=>{C["avatar-modal"].changeButtonText(),A.updateUserAvatar(e.avatar)})).catch((e=>{console.error(e)})),C["avatar-modal"].close()})(t)))));t.setEventListeners(),C[e.id]=t})),b.forEach((e=>{const t=new a(`#${e.id}`);t.setEventListeners(),k[e.id]=t}));const A=new class{constructor(e){let{profileName:t,profileJob:r,profileAvatar:o}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(r),this._profileAvatar=document.querySelector(o)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent,avatar:this._profileAvatar}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}updateUserAvatar(e){this._profileAvatar.src=e,this._profileAvatar.alt=this._profileName.textContent}}({profileName:".profile__name",profileJob:".profile__description",profileAvatar:".profile__image"})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,